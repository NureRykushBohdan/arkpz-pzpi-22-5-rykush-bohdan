Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до практичної роботи номер 1 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Правила оформлення програмного коду"



Виконав ст. гр ПЗПІ-22-5
Рикуш Богдан Юрійович

Перевірив
Дашенков Дмитро Сергійович



Харків 2024
 
1 МЕТА
	Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, у цьому випадку для мови програмування Java, а також навчити аналізувати та рефакторити код для покращення його якості.

2 ВСТУП
	Java є однією з найбільш популярних мов програмування у світі, відзначаючись своєю універсальністю та стабільністю. Серед основних особливостей мови варто відзначити об'єктно-орієнтованість, багатопоточність, безпеку та автоматичне управління пам'яттю. 
Правила грамотного оформлення коду допомагають зробити код більш читабельним, легшим для подальшої підтримки та, в деяких випадках, більш продуктивним.
У рамках цієї роботи буде розглянуто стандарти та правила оформлення коду на Java, що сприяють підвищенню якості програмного забезпечення, забезпечують його зрозумілість, ефективність та легкість у підтримці.

 
3 ХІД РОБОТИ

3.1 Організація файлів

Рекомендація: Довжина файлів – до 2000 рядків
Опис: Файли довші за 2000 рядків є громіздкими та незручними, тому їх слід уникати.

Рекомендація: Один клас чи інтерфейс на файл
Опис: Кожен вихідний файл Java містить один публічний клас або інтерфейс, який має туж назву, що й назва файлу. Коли приватні класи та інтерфейси пов'язані з публічним класом, їх можна розмістити у тому самому вихідному файлі, що й публічний клас. Публічний клас або інтерфейс повинен бути першим у файлі.
Приклад:
// поганий приклад
public class ClassOne { }
public class ClassTwo { }

// гарний приклад
public class GoodFileExample {
	private class HelperClass { }
}

Рекомендація: Файл повинен відповідати конкретній структурі
Опис: Вихідні файли Java мають наступний порядок: початкові коментарі; Package та Import інструкції; декларація класу чи інтерфейсу.
Приклад:
// поганий приклад
public class ClassOne { }
public class ClassTwo { }

import java.util.List;
package pl_1;

// гарний приклад
/*
 * GoodClassFile.java
 * A correct Java file structure example
 */

package pl_1;
import java.util.List;

public class GoodFileExample { }

Рекомендація: Декларація класу чи інтерфейсу повинна відповідати конкретній структурі
Опис: Елементи декларації класу чи інтерфейсу мають йти в наступному порядку: коментар документації класу чи інтерфейсу, інструкція class або interface, коментар імплементації класу чи інтерфейсу, статичні змінні (public, потім protected, потім private), змінні екземпляру (public, потім protected, потім private), конструктори, методи.
Приклад:
// поганий приклад
public class BadClassExample {
	
	public void someMethod() {
        System.out.println("Hello, world!");
    }

    private int instanceVariable;
    public static final String CONSTANT = "constant";
    
    public BadClass() {
        instanceVariable = 10;
    }
    
}

// гарний приклад
public class GoodClassExample {

    public static final String CONSTANT = "constant";
    
    private int instanceVariable;

    public GoodClass() {
        instanceVariable = 10;
    }

    public void someMethod() {
        System.out.println("Hello, world!");
    }

}

Рекомендація: Дотримуйтесь 4 пробілів як одиниці відступів та 8 пробілів як одиниці табуляції
Опис: За одиницю відступу слід використовувати чотири пробіли. Точна конструкція відступу (пробіли чи табуляції) не є чітко визначеною чи обов’язковою. Табуляція має бути встановлена точно через кожні 8 пробілів (а не 4).
Приклад:
// поганий приклад
public void badIndentation() {
  int a = 1; // Only two spaces
    if (a == 1) {
System.out.println("Wrong indentation"); // No indentation
    }
}


// гарний приклад
public void goodIndentation() {
    int a = 1;  // Four spaces
    if (a == 1) {
        System.out.println("Proper indentation");  // Four spaces
    }
}

Рекомендація: Довжина строки – до 80 символів.
Опис: Уникайте рядки довше 80 символів, оскільки вони погано обробляються багатьма терміналами та є незручними для роботи.
Приклад:
// поганий приклад
public void badLineLength() {
    String message = "This line is way too long to fit within the recommended 80-character limit, which affects readability.";
}

// гарний приклад
public void goodLineLength() {
    String message = "This line is within the 80-character limit.";
}

Рекомендація: Дотримуйтесь принципів переносу частин задовгого рядку
Опис: Якщо вираз не вміщується в один рядок, розбийте його відповідно до цих загальних принципів: розривайте рядки після коми чи перед оператором; надавайте перевагу розривам на вищому рівні перед розривами нижчого рівня; вирівнюйте новий рядок з початком виразу на тому ж рівні, що і попередній рядок. Якщо наведені вище правила призводять до заплутування коду або до того, що код притискається до правого краю, просто зробіть відступ у 8 пробілів.
Приклад:
// поганий приклад
public void badExampleMethod() {
    String message = "This is a very long line of text that does not follow proper line-breaking principles, making it difficult to read, especially if displayed on a small screen or in a text editor.";

    int result = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 
13 + 14 + 15 + 16 + 17 + 18 + 19 + 20;
}

// гарний приклад
public void goodExampleMethod() {
    String message = "This is a very long line of text that follows "
        		    + "proper line-breaking principles, "
        		    + "making it easier to read, especially on smaller "
        		    + "screens or in editors with limited width.";

    int result = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
                 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 
                 + 19 + 20;
}

3.2 Коментарі

Рекомендація: Не додавайте непотрібні коментарі
Опис: Коментарі слід використовувати для опису коду та надання додаткової інформації, яка не є доступною у самому коді, але є важливою для читання та розуміння програми.
Приклад:
// поганий приклад
public int badCommentUsage() {
    // Setting value to 10
    int value = 10;
    return value;
}

// гарний приклад
public int goodCommentUsage() {
    int value = 10;
    return value;
}

Рекомендація: Не плутайте коментарі імплементації та документації
Опис: Коментарі імплементації використовуються для коментування коду та деталей реалізації, в той час як документаційні коментарі призначені для опису специфікації коду відірвано від реалізації.
Приклад:
// поганий приклад
// This method is used to add two values
// It uses standard sum
public int badAdd(int a, int b) {
    return a + b;
}

// гарний приклад
/**
 * Returns the sum of two integers.
 * This method performs a simple addition operation.
 *
 * @param a the first integer
 * @param b the second integer
 * @return the sum of a and b
 */
public int goodAdd(int a, int b) {
    return a + b; // Implementation comment: adding a and b
}

3.3 Декларації

Рекомендація: Робіть одну декларацію за рядок
Опис: Рекомендується писати по одній декларації в рядку, оскільки це заохочує коментування. Між типом та ідентифікатором використовується або один пробіл, або табуляція.
Приклад:
// поганий приклад
int a = 1, b = 2;

// гарний приклад
int a = 1;
int b = 2;
int c = 3;

Рекомендація: Декларації мають знаходитися на початку блоку
Опис: Розміщуйте декларації тільки на початку блоків (блок - це будь-який код, оточений фігурними дужками «{» і «}»). Не чекайте оголошення змінних до їх першого використання; це може заплутати необережного програміста і ускладнити перенесення коду в межах області видимості. Єдиний виняток з цього правила - індекси циклів for, які в Java можна оголошувати в самій конструкції.
Приклад:
// поганий приклад
public void badDeclaration() {
    //...
    int c = 3;
}

// гарний приклад
public void goodDeclaration() {
    int c = 3;
}

Рекомендація: Ініціалізуйте змінні разом із декларацією
Опис: Єдина причина не ініціалізувати змінну там, де її оголошено, - це якщо початкове значення залежить від деяких обчислень, що відбудуться пізніше.
Приклад:
// поганий приклад
int c;
//...
c = 3;

// гарний приклад
int c = 3;
 
3.4 Інструкції

Рекомендація: Одна інструкція на рядок
Опис: Кожен рядок повинен містити не більше однієї інструкції.
Приклад:
// поганий приклад
int a = 1; int b = 2;

// гарний приклад
int a = 1; 
int b = 2;

Рекомендація: Оператор return не потребує дужок
Опис: Якщо метод повертає значення, оператор return не повинен використовувати дужки, якщо тільки вони не роблять значення, що повертається, більш очевидним.
Приклад:
// поганий приклад
return (a * 2);

// гарний приклад
return a * 2;

Рекомендація: Дотримуйтесь форматування if-else інструкцій
Опис: Перша фігурна дужка залишається на тому ж рядку, що й if чи else інструкція. Друга дужка переноситься на новий рядок. else та else if конструкції залишаються на тому ж рядку, що й попередня закриваюча фігурна дужка.
Приклад:
// поганий приклад
if (flag) { /*...*/ }
else 
{
     	//...
}

// гарний приклад
if (flag) { 
    	//...
} else {
     	//...
}

Рекомендація: Дотримуйтесь форматування for та while інструкцій
Опис: Перша фігурна дужка залишається на тому ж рядку, що й for чи while інструкція. Друга дужка переноситься на новий рядок. Порожній оператор for чи while не використовує фігурних дужок та закінчується крапкою з комою.
Приклад:
// поганий приклад
for (int i = 0; i < 10; i++) {}
        
while (flag) 
{ /*...*/ }

// гарний приклад
for (int i = 0; i < 10; i++);
        
while (flag) { 
    	//... 
}

Рекомендація: Дотримуйтесь форматування інструкції do-while 
Опис: Перша фігурна дужка залишається на тому ж рядку, що й do інструкція. Друга дужка переноситься на новий рядок. while конструкція залишається на тому ж рядку, що й закриваюча дужка та закінчується крапкою з комою.
Приклад:
// поганий приклад
do 
{
	//...
} 
while (flag);

// гарний приклад
do {
//...
} while (flag);

Рекомендація: Дотримуйтесь форматування інструкції switch
Опис: Перша фігурна дужка залишається на тому ж рядку, що й do інструкція. Друга дужка переноситься на новий рядок. Кожен case блок, який не включає інструкцію break, має включати на його місці коментар. Кожна інструкція switch має мати default блок.
Приклад: 
// поганий приклад
switch (day) 
{
    case 1:
        System.out.println("Monday");
        break;
    case 2:
        System.out.println("Tuesday");
    case 3:
        System.out.println("Wednesday");
        break;
}

// гарний приклад
switch (day) {
case 1:
    System.out.println("Monday");
    break;
case 2:
    System.out.println("Tuesday");
    // fall through
case 3:
    System.out.println("Wednesday");
    break;
default:
    System.out.println("Invalid day");
    break;
}
	
Рекомендація: Дотримуйтесь форматування інструкції try-catch
Опис: Перша фігурна дужка залишається на тому ж рядку, що й try чи catch інструкція. Друга дужка переноситься на новий рядок. catch конструкція залишаються на тому ж рядку, що й попередня закриваюча фігурна дужка.
Приклад:
// поганий приклад
try 
{ 
    //...
} catch (Exception e) 
{
    System.out.println("Error occurred");
}

// гарний приклад
try {
    //...
} catch (Exception e) {
    System.out.println("Error occurred");
}

3.5 Іменування 

Рекомендація: Використовуйте PascaleCase для назв класів та інтерфейсів, camelCase для назв методів та змінних, та SCREAMING_SNAKE_CASE для назв констант 
Приклад:
// поганий приклад
public static final int max_value = 100;

public void PrintResult() {
    int my_var = max_value;
    System.out.println(my_var);
}

// гарний приклад
public static final int MAX_VALUE = 100;

public void printResult() {
    int myVar = MAX_VALUE;
    System.out.println(myVar);
}

3.6 Загальні правила 

Рекомендація: Уникайте магічних чисел
Опис: Числові константи (літерали) не слід кодувати безпосередньо, за винятком -1, 0 і 1, які можуть з'являтися в циклі for як значення лічильника.
Приклад:
// поганий приклад
public int badCalculateDiscount(int price) {
    return price – 20;
}

// гарний приклад
private static final int DISCOUNT_AMOUNT = 20;
	
public int goodCalculateDiscount(int price) {
    return price - DISCOUNT_AMOUNT;
}

Рекомендація: Використовуйте дужки
Опис: У виразах зі змішаними операторами рекомендується широко використовувати круглі дужки, щоб уникнути проблем, пов'язаних із пріоритетом операторів. Навіть якщо пріоритет оператора здається зрозумілим для вас, він може бути незрозумілим для інших.
Приклад:
// поганий приклад
return a + b * c / 2;

// гарний приклад
return a + ((b * c) / 2);

Рекомендація: Надавайте доступ до змінних лише коли це потрібно
Опис: Не робіть екземпляри або змінні класу загальнодоступними без вагомої причини – часто змінні екземпляра не потрібно явно встановлювати або отримувати. 
Приклад:
// поганий приклад
public int publicCount = 0;

public void increment1() {
    	publicCount++;
}

// гарний приклад
private int privateCount = 0;

public void increment2() {
    privateCount++;
}

public int getCount() {
    return privateCount;
}

 
ВИСНОВКИ
	
	Під час виконання практичної роботи було проаналізовано основні принципи написання чистого та підтримуваного коду на мові програмування Java, які включають правила організації файлів, написання коментарів, декларування та організації інструкцій, правила іменування, а також певні загальні правила написання коду. Дотримання цих правил є ключем до створення якісного програмного забезпечення, яке буде зрозумілим для інших розробників та легким для подальшої підтримки.

 
ДОДАТОК А
Список використаних джерел

1. Java Code Conventions. Oracle. URL: https://www.oracle.com/technetwork/java/codeconventions-150003.pdf (date of access: 29.10.2024).
 
ДОДАТОК Б
Презентація
                     
