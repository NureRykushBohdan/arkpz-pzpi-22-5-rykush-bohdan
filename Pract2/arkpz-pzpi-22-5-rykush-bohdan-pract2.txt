Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до практичної роботи номер 2 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Методи рефакторингу коду програмного забезпечення"



Виконав ст. гр ПЗПІ-22-5
Рикуш Богдан Юрійович

Перевірив
Дашенков Дмитро Сергійович



Харків 2024
 
1 МЕТА
	Вивчити основні методи рефакторингу коду на основі реальних прикладів з власних проектів. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

2 ВСТУП
Рефакторинг — це процес удосконалення коду без зміни його функціональності. Його основна мета — зробити код більш читабельним, легшим для підтримки та менш схильним до помилок, не змінюючи при цьому поведінку програми.
В роботі розглянуто наступні методи рефакторингу:
1. Remove Parameter
2. Replace magic number with symbolic constant
	3. Replace error code with exception 
3 ХІД РОБОТИ

3.1 Remove Parameter (Видаліть зайвий параметр)
Опис: цей метод передбачає видалення тих параметрів функцій, методів чи конструкторів, які наразі є непотрібними та невикористовуваними. До їх появи може призвести зміна функціональності відповідного методу, функції чи конструктору, або поява іншого шляху доступу до даних, які раніше передавалися за допомогою цього параметру (наприклад їх винесення до глобальних змінних чи внутрішніх змінних відповідного класу). Використання цього методу дозволяє отримати більш чистий та зрозумілий код, зробити його менш схильним до помилок.
Кроки:
1.	Перевірте, чи не реалізовано цю сигнатуру методу у суперкласі або підкласі; перевірте, чи клас або суперклас використовує параметр, якщо це так, то не виконуйте рефакторинг
2.	Перевірте, чи всі параметри методу використовуються
3.	Оголосіть новий метод без зайвих параметрів
4.	Скопіюйте код до нового методу
5.	Замініть код старого методу так, щоб він викликав новий
6.	Скомпілюйте та протестуйте програму
7.	Знайдіть та замініть всі виклики старого методу на виклики нового
8.	Скомпілюйте та протестуйте програму після кожної заміни 
9.	Видаліть старий метод
10.	Скомпілюйте та протестуйте програму
Приклад:
//поганий приклад
public double calculateTotalPrice(double price, 
			int quantity, String discountCode) {
    return price * quantity;
}

//виправлений приклад
public double calculateTotalPrice(double price, int quantity) {
    return price * quantity;
}

У цьому прикладі, метод calculateTotalPrice включав невикористовуваний параметр discountCode. Під час рефакторингу його було видалено.

3.2 Replace magic number with symbolic constant (Замініть магічне число символьною константою)
Опис: цей метод рефакторингу передбачає винесення магічних чисел, тобто числових значень із певним особливим значенням, до констант із пояснюючим іменем. Використання цього методу дозволяє отримати більш зрозумілий та легкий для читання та сприйняття код, а також зробити його менш схильним до помилок, пов’язаних із неуважністю програміста.  
Кроки:
1.	Оголосіть константу і задайте їй значення магічного числа
2.	Знайдіть усі входження магічного числа
3.	Перевірте, чи відповідають знайдені магічні числа використанню константи; якщо це так, замініть магічні числа на константу
4.	Скомпілюйте та протестуйте програму
Приклад:
//поганий приклад
public double calculateTax(double income) {
    return income * 0.18;
}

//виправлений приклад
private static final double TAX_RATE = 0.18;
	
public double calculateTax(double income) {
    return income * TAX_RATE;
}


У цьому прикладі, метод calculateTax включав використання магічного числа 0.18. Під час рефакторингу це число було винесено до константи TAX_RATE.

3.3 Replace error code with exception (Замініть код помилки виключенням)
Опис: цей метод рефакторингу передбачає використання виключень замість кодів помилок в тих мовах програмування, які їх передбачають. Використання цього методу дозволяє чітко відокремити нормальну роботу програми від помилкової, що робить програму більш зрозумілою та менш схильної до помилок, пов’язаних із обробкою результатів роботи методів чи функцій.
Кроки:
1.	Замініть повернення помилкового коду на генерацію виключення
2.	Знайдіть усі виклики методу та змініть їх щоб врахувати потенціальну появу вийнятку
3.	Змініть сигнатуру методу щоб відобразити використання виключення (якщо мова програмування це передбачає)
4.	Скомпілюйте та протестуйте програму
Приклад: 
//поганий приклад
public int withdraw(double amount) {
    if (amount < 0) {
        return -1; // Error code indicating invalid input
    }
    // Process withdrawal
    return 0;
}

//виправлений приклад
public void withdraw(double amount) {
    if (amount < 0) {
        throw new IllegalArgumentException("Amount must be positive");
    }
    // Process withdrawal
}

	У цьому прикладі, метод повертав withdraw значення -1 в разі виникнення помилкового значення параметру amount та значення 0, якщо метод виконався правильно. Під час рефакторингу повернення коду помилку було замінено на генерацію виключення.  
3 ІНСТРУМЕНТИ РЕФАКТОРИНГУ

3.1 Інтегровані середовища розробки (IDE)
IntelliJ IDEA (JetBrains) — потужне середовище для рефакторингу коду з широкими можливостями для Java, Kotlin, Python та інших мов.
Visual Studio (Microsoft) — підтримує рефакторинг для C#, C++, VB.NET і Python, з можливістю розширення за допомогою плагінів.
Eclipse — популярне середовище для Java з інструментами для основних типів рефакторингу.
PyCharm (JetBrains) — спеціалізується на рефакторингу Python, з потужними засобами для структуризації та оптимізації коду.

3.2 Плагіни до IDE
ReSharper (JetBrains) — розширення для Visual Studio, яке додає додаткові можливості рефакторингу, зокрема для C#, JavaScript та інших мов.
JRefactory для Eclipse — додає додаткові функції рефакторингу для Java.

3.3 Інструменти для автоматичного аналізу коду (статичний аналіз)
CodeClimate — інструмент для автоматизованого аналізу якості коду, інтегрується із системами CI/CD та підтримує широкий спектр мов.
SonarQube — платформа для контролю якості коду, з підтримкою різних мов і інтеграцією з CI/CD-системами для відстеження проблем коду.

3.4 Освітні ресурси та довідники
Refactoring.Guru — ресурс з прикладами різних методів рефакторингу на популярних мовах, який допомагає розібратися у підходах до рефакторингу коду.

3.5 Інструменти для автоматизованого рефакторингу (ARMs)
Java Refactoring Browser — автоматичні інструменти, які пропонують популярні техніки рефакторингу, зокрема для роботи з Java, полегшуючи процес зміни структури коду без втрати функціональності.  
ВИСНОВКИ

	Під час виконання практичної роботи було з’ясовано, що рефакторинг — це процес удосконалення коду без зміни його функціональності; було розглянуто такі методи рефакторингу, як Remove Parameter, Replace magic number with symbolic constant та Replace error code with exception. Їх роботу також було продемонстровано на трьох прикладах.
Під час виконання практичної роботи також було ознайомлено із такими інструментами рефакторингу як інтегровані середовища розробки, плагіни до IDE, інструменти для автоматичного статичного аналізу коду, освітні ресурси та довідники, а також інструменти для автоматизованого рефакторингу.

	
 
ДОДАТОК А
Список використаних джерел

1. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999. – 464 p. 
ДОДАТОК Б
Презентація
               

https://youtu.be/NWlKs5G4dNg
